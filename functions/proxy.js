// /functions/proxy.js - 简洁、稳定版export async function onRequestPost(context) {    try {        // 从前端请求中解析出 body        const { apiKey, body } = await context.request.json();        // 验证 apiKey 和 body 是否存在        if (!apiKey || !body) {            return new Response(JSON.stringify({ error: 'Missing apiKey or body' }), {                status: 400,                headers: { 'Content-Type': 'application/json' },            });        }        const modelName = 'gemini-2.5-pro';        const googleApiUrl = `https://generativelanguage.googleapis.com/v1beta/models/${modelName}:generateContent?key=${apiKey}`;        // 向 Google Gemini API 发起请求        const googleResponse = await fetch(googleApiUrl, {            method: 'POST',            headers: {                'Content-Type': 'application/json',            },            body: JSON.stringify(body),        });        // 直接将 Google API 的响应透传回前端        return new Response(googleResponse.body, {            status: googleResponse.status,            headers: googleResponse.headers, // 保持原始的 headers        });    } catch (error) {        console.error('Proxy Error:', error);        return new Response(JSON.stringify({ error: 'Proxy server error' }), {            status: 500,            headers: { 'Content-Type': 'application/json' },        });    }}